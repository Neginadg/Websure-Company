{"version":3,"file":"static/js/901.98b3da9c.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/FormOnly.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport emailjs from \"@emailjs/browser\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    // EmailJS configuration from environment variables\r\n    const serviceId = process.env.REACT_APP_EMAILJS_SERVICE_ID;\r\n    const templateId = process.env.REACT_APP_EMAILJS_TEMPLATE_ID;\r\n    const publicKey = process.env.REACT_APP_EMAILJS_PUBLIC_KEY;\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        // Check if EmailJS is configured\r\n        if (!serviceId || !templateId || !publicKey) {\r\n          notification[\"error\"]({\r\n            message: \"Configuration Error\",\r\n            description:\r\n              \"Email service is not properly configured. Please contact the administrator.\",\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Send email using EmailJS\r\n        const result = await emailjs.send(\r\n          serviceId,\r\n          templateId,\r\n          {\r\n            from_name: values.name,\r\n            from_email: values.email,\r\n            message: values.message,\r\n            to_name: \"Websure Software\",\r\n          },\r\n          publicKey\r\n        );\r\n\r\n        if (result.status === 200) {\r\n          event.target.reset();\r\n          setFormState(() => ({\r\n            values: { ...initialValues },\r\n            errors: { ...initialValues },\r\n          }));\r\n          notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent successfully!\",\r\n          });\r\n        } else {\r\n          notification[\"error\"]({\r\n            message: \"Error\",\r\n            description:\r\n              \"There was an error sending your message, please try again later.\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n  width: 100%;\r\n  padding: 12px 16px;\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 8px;\r\n  box-sizing: border-box;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  color: white;\r\n\r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, 0.6);\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border-color: #2fc3ea;\r\n    box-shadow: 0 0 0 3px rgba(47, 195, 234, 0.2);\r\n    background: rgba(255, 255, 255, 0.15);\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n  width: 100%;\r\n  padding: 12px 16px;\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 8px;\r\n  box-sizing: border-box;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  color: white;\r\n\r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, 0.6);\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border-color: #2fc3ea;\r\n    box-shadow: 0 0 0 3px rgba(47, 195, 234, 0.2);\r\n    background: rgba(255, 255, 255, 0.15);\r\n  }\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n  width: 100%;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n  width: 100%;\r\n  margin-top: 1rem;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n    text-align: center;\r\n  }\r\n`;\r\n","import { Col } from \"antd\";\nimport { withTranslation, TFunction } from \"react-i18next\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport validate from \"../../common/utils/validationRules\";\nimport { Button } from \"../../common/Button\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport { FormGroup, Span, ButtonContainer } from \"./styles\";\n\ninterface ValidationTypeProps {\n  type: string;\n}\n\ninterface FormOnlyProps {\n  t: TFunction;\n}\n\nconst FormOnly = ({ t }: FormOnlyProps) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type as keyof typeof errors];\n    return <Span>{ErrorMessage}</Span>;\n  };\n\n  return (\n    <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n      <Col span={24}>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          placeholder={t(\"Your Name\")}\n          value={values.name || \"\"}\n          onChange={handleChange}\n        />\n        <ValidationType type=\"name\" />\n      </Col>\n      <Col span={24}>\n        <Input\n          type=\"text\"\n          name=\"email\"\n          placeholder={t(\"Your Email\")}\n          value={values.email || \"\"}\n          onChange={handleChange}\n        />\n        <ValidationType type=\"email\" />\n      </Col>\n      <Col span={24}>\n        <TextArea\n          placeholder={t(\"Your Message\")}\n          value={values.message || \"\"}\n          name=\"message\"\n          onChange={handleChange}\n        />\n        <ValidationType type=\"message\" />\n      </Col>\n      <ButtonContainer>\n        <Button name=\"submit\">{t(\"Submit\")}</Button>\n      </ButtonContainer>\n    </FormGroup>\n  );\n};\n\nexport default withTranslation()(FormOnly);\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Container","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","StyledContainer","StyledTextArea","Label","_templateObject3","withTranslation","_ref","placeholder","onChange","t","_jsxs","children","_jsx","htmlFor","id","FormGroup","Span","ButtonContainer","_templateObject4","handleChange","handleSubmit","formState","setFormState","useState","_objectSpread","event","persist","value","target","prevState","async","preventDefault","serviceId","process","templateId","publicKey","Object","every","error","emailjs","from_name","from_email","to_name","status","reset","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","autoComplete","onSubmit","Col","span","Input","TextArea","Button"],"sourceRoot":""}